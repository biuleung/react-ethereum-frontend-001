{"version":3,"sources":["views/users/UsersData.js","views/users/Users.js"],"names":["usersData","getBadge","status","Users","history","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","useEffect","xl","className","items","fields","key","_classes","hover","striped","itemsPerPage","activePage","clickableRows","onRowClick","item","push","id","scopedSlots","color","onActivePageChange","newPage","pages","length","doubleArrows","align"],"mappings":"8LAIeA,EAJG,G,QCeZC,EAAW,SAAAC,GACf,OAAQA,GACN,IAAK,SAAU,MAAO,UACtB,IAAK,WAAY,MAAO,YACxB,IAAK,UAAW,MAAO,UACvB,IAAK,SAAU,MAAO,SACtB,QAAS,MAAO,YAiELC,UA7DD,WACZ,IAAMC,EAAUC,cACVC,EAAYC,cAAcC,OAAOC,MAAM,gBAAiB,IACxDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GAEtE,EAAwBM,mBAASF,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAUA,OAJAC,qBAAU,WACRL,IAAgBG,GAAQC,EAAQJ,KAC/B,CAACA,EAAaG,IAGf,cAAC,IAAD,UACE,cAAC,IAAD,CAAMG,GAAI,EAAV,SACE,eAAC,IAAD,WACE,eAAC,IAAD,mBAEE,uBAAOC,UAAU,aAAjB,yBAEF,eAAC,IAAD,WACA,cAAC,IAAD,CACEC,MAAOlB,EACPmB,OAAQ,CACN,CAAEC,IAAK,OAAQC,SAAU,oBACzB,aAAc,UAEhBC,OAAK,EACLC,SAAO,EACPC,aA5BW,EA6BXC,WAAYZ,EACZa,eAAa,EACbC,WAAY,SAACC,GAAD,OAAUxB,EAAQyB,KAAR,iBAAuBD,EAAKE,MAClDC,YAAe,CACb,OACE,SAACH,GAAD,OACE,6BACE,cAAC,IAAD,CAAQI,MAAO/B,EAAS2B,EAAK1B,QAA7B,SACG0B,EAAK1B,eAMlB,cAAC,IAAD,CACEuB,WAAYZ,EACZoB,mBA1CS,SAAAC,GACjBxB,IAAgBwB,GAAW9B,EAAQyB,KAAR,sBAA4BK,KA0C/CC,MAAOnC,EAAUoC,OA9CN,EA+CXC,cAAc,EACdC,MAAM","file":"static/js/9.7df6502b.chunk.js","sourcesContent":["const usersData = [\n  // {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\n]\n\nexport default usersData\n","import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\n\nimport usersData from './UsersData'\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Active': return 'success'\n    case 'Inactive': return 'secondary'\n    case 'Pending': return 'warning'\n    case 'Banned': return 'danger'\n    default: return 'primary'\n  }\n}\n\nconst Users = () => {\n  const history = useHistory()\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\n  const itemsPerPage = 5;\n  const [page, setPage] = useState(currentPage)\n\n  const pageChange = newPage => {\n    currentPage !== newPage && history.push(`/users?page=${newPage}`)\n  }\n\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage)\n  }, [currentPage, page])\n\n  return (\n    <CRow>\n      <CCol xl={6}>\n        <CCard>\n          <CCardHeader>\n            Users\n            <small className=\"text-muted\"> example</small>\n          </CCardHeader>\n          <CCardBody>\n          <CDataTable\n            items={usersData}\n            fields={[\n              { key: 'name', _classes: 'font-weight-bold' },\n              'registered', 'status'\n            ]}\n            hover\n            striped\n            itemsPerPage={itemsPerPage}\n            activePage={page}\n            clickableRows\n            onRowClick={(item) => history.push(`/users/${item.id}`)}\n            scopedSlots = {{\n              'status':\n                (item)=>(\n                  <td>\n                    <CBadge color={getBadge(item.status)}>\n                      {item.status}\n                    </CBadge>\n                  </td>\n                )\n            }}\n          />\n          <CPagination\n            activePage={page}\n            onActivePageChange={pageChange}\n            pages={usersData.length / itemsPerPage}\n            doubleArrows={false} \n            align=\"center\"\n          />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n"],"sourceRoot":""}